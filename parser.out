Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BREAK
    CASE
    CHAR
    CONST
    CONTINUE
    DEFAULT
    DO
    DOUBLE
    ELSE
    ENUM
    EQUALS
    EXTERN
    FLOATTYPE
    FLOAT_CONST
    FOR
    GOTO
    GREATER
    ID
    IF
    INFERIOR
    INT
    INT_CONST
    LBRACE
    LONG
    RBRACE
    REGISTER
    RETURN
    SHORT
    SIGNED
    SIZEOF
    STATIC
    STRUCT
    SWITCH
    TYPEDEF
    UNION
    UNSIGNED
    VOID
    VOLATILE
    WHILE

Grammar

Rule 0     S' -> print_statement
Rule 1     print_statement -> PRINT LPAREN expression RPAREN SEMICOL
Rule 2     print_statement -> PRINT LPAREN STRING RPAREN SEMICOL
Rule 3     expression -> expression PLUS term
Rule 4     expression -> expression MINUS term
Rule 5     expression -> term
Rule 6     term -> term TIMES factor
Rule 7     term -> term DIVIDE factor
Rule 8     term -> term MODULO factor
Rule 9     term -> factor
Rule 10    factor -> NUMBER
Rule 11    factor -> LPAREN expression RPAREN
Rule 12    empty -> <empty>

Terminals, with rules where they appear

BREAK                : 
CASE                 : 
CHAR                 : 
CONST                : 
CONTINUE             : 
DEFAULT              : 
DIVIDE               : 7
DO                   : 
DOUBLE               : 
ELSE                 : 
ENUM                 : 
EQUALS               : 
EXTERN               : 
FLOATTYPE            : 
FLOAT_CONST          : 
FOR                  : 
GOTO                 : 
GREATER              : 
ID                   : 
IF                   : 
INFERIOR             : 
INT                  : 
INT_CONST            : 
LBRACE               : 
LONG                 : 
LPAREN               : 1 2 11
MINUS                : 4
MODULO               : 8
NUMBER               : 10
PLUS                 : 3
PRINT                : 1 2
RBRACE               : 
REGISTER             : 
RETURN               : 
RPAREN               : 1 2 11
SEMICOL              : 1 2
SHORT                : 
SIGNED               : 
SIZEOF               : 
STATIC               : 
STRING               : 2
STRUCT               : 
SWITCH               : 
TIMES                : 6
TYPEDEF              : 
UNION                : 
UNSIGNED             : 
VOID                 : 
VOLATILE             : 
WHILE                : 
error                : 

Nonterminals, with rules where they appear

empty                : 
expression           : 1 3 4 11
factor               : 6 7 8 9
print_statement      : 0
term                 : 3 4 5 6 7 8

Parsing method: LALR

state 0

    (0) S' -> . print_statement
    (1) print_statement -> . PRINT LPAREN expression RPAREN SEMICOL
    (2) print_statement -> . PRINT LPAREN STRING RPAREN SEMICOL

    PRINT           shift and go to state 2

    print_statement                shift and go to state 1

state 1

    (0) S' -> print_statement .



state 2

    (1) print_statement -> PRINT . LPAREN expression RPAREN SEMICOL
    (2) print_statement -> PRINT . LPAREN STRING RPAREN SEMICOL

    LPAREN          shift and go to state 3


state 3

    (1) print_statement -> PRINT LPAREN . expression RPAREN SEMICOL
    (2) print_statement -> PRINT LPAREN . STRING RPAREN SEMICOL
    (3) expression -> . expression PLUS term
    (4) expression -> . expression MINUS term
    (5) expression -> . term
    (6) term -> . term TIMES factor
    (7) term -> . term DIVIDE factor
    (8) term -> . term MODULO factor
    (9) term -> . factor
    (10) factor -> . NUMBER
    (11) factor -> . LPAREN expression RPAREN

    STRING          shift and go to state 6
    NUMBER          shift and go to state 9
    LPAREN          shift and go to state 4

    expression                     shift and go to state 5
    term                           shift and go to state 7
    factor                         shift and go to state 8

state 4

    (11) factor -> LPAREN . expression RPAREN
    (3) expression -> . expression PLUS term
    (4) expression -> . expression MINUS term
    (5) expression -> . term
    (6) term -> . term TIMES factor
    (7) term -> . term DIVIDE factor
    (8) term -> . term MODULO factor
    (9) term -> . factor
    (10) factor -> . NUMBER
    (11) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 9
    LPAREN          shift and go to state 4

    expression                     shift and go to state 10
    term                           shift and go to state 7
    factor                         shift and go to state 8

state 5

    (1) print_statement -> PRINT LPAREN expression . RPAREN SEMICOL
    (3) expression -> expression . PLUS term
    (4) expression -> expression . MINUS term

    RPAREN          shift and go to state 11
    PLUS            shift and go to state 12
    MINUS           shift and go to state 13


state 6

    (2) print_statement -> PRINT LPAREN STRING . RPAREN SEMICOL

    RPAREN          shift and go to state 14


state 7

    (5) expression -> term .
    (6) term -> term . TIMES factor
    (7) term -> term . DIVIDE factor
    (8) term -> term . MODULO factor

    RPAREN          reduce using rule 5 (expression -> term .)
    PLUS            reduce using rule 5 (expression -> term .)
    MINUS           reduce using rule 5 (expression -> term .)
    TIMES           shift and go to state 15
    DIVIDE          shift and go to state 16
    MODULO          shift and go to state 17


state 8

    (9) term -> factor .

    TIMES           reduce using rule 9 (term -> factor .)
    DIVIDE          reduce using rule 9 (term -> factor .)
    MODULO          reduce using rule 9 (term -> factor .)
    RPAREN          reduce using rule 9 (term -> factor .)
    PLUS            reduce using rule 9 (term -> factor .)
    MINUS           reduce using rule 9 (term -> factor .)


state 9

    (10) factor -> NUMBER .

    TIMES           reduce using rule 10 (factor -> NUMBER .)
    DIVIDE          reduce using rule 10 (factor -> NUMBER .)
    MODULO          reduce using rule 10 (factor -> NUMBER .)
    RPAREN          reduce using rule 10 (factor -> NUMBER .)
    PLUS            reduce using rule 10 (factor -> NUMBER .)
    MINUS           reduce using rule 10 (factor -> NUMBER .)


state 10

    (11) factor -> LPAREN expression . RPAREN
    (3) expression -> expression . PLUS term
    (4) expression -> expression . MINUS term

    RPAREN          shift and go to state 18
    PLUS            shift and go to state 12
    MINUS           shift and go to state 13


state 11

    (1) print_statement -> PRINT LPAREN expression RPAREN . SEMICOL

    SEMICOL         shift and go to state 19


state 12

    (3) expression -> expression PLUS . term
    (6) term -> . term TIMES factor
    (7) term -> . term DIVIDE factor
    (8) term -> . term MODULO factor
    (9) term -> . factor
    (10) factor -> . NUMBER
    (11) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 9
    LPAREN          shift and go to state 4

    term                           shift and go to state 20
    factor                         shift and go to state 8

state 13

    (4) expression -> expression MINUS . term
    (6) term -> . term TIMES factor
    (7) term -> . term DIVIDE factor
    (8) term -> . term MODULO factor
    (9) term -> . factor
    (10) factor -> . NUMBER
    (11) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 9
    LPAREN          shift and go to state 4

    term                           shift and go to state 21
    factor                         shift and go to state 8

state 14

    (2) print_statement -> PRINT LPAREN STRING RPAREN . SEMICOL

    SEMICOL         shift and go to state 22


state 15

    (6) term -> term TIMES . factor
    (10) factor -> . NUMBER
    (11) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 9
    LPAREN          shift and go to state 4

    factor                         shift and go to state 23

state 16

    (7) term -> term DIVIDE . factor
    (10) factor -> . NUMBER
    (11) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 9
    LPAREN          shift and go to state 4

    factor                         shift and go to state 24

state 17

    (8) term -> term MODULO . factor
    (10) factor -> . NUMBER
    (11) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 9
    LPAREN          shift and go to state 4

    factor                         shift and go to state 25

state 18

    (11) factor -> LPAREN expression RPAREN .

    TIMES           reduce using rule 11 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 11 (factor -> LPAREN expression RPAREN .)
    MODULO          reduce using rule 11 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 11 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 11 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 11 (factor -> LPAREN expression RPAREN .)


state 19

    (1) print_statement -> PRINT LPAREN expression RPAREN SEMICOL .

    $end            reduce using rule 1 (print_statement -> PRINT LPAREN expression RPAREN SEMICOL .)


state 20

    (3) expression -> expression PLUS term .
    (6) term -> term . TIMES factor
    (7) term -> term . DIVIDE factor
    (8) term -> term . MODULO factor

    RPAREN          reduce using rule 3 (expression -> expression PLUS term .)
    PLUS            reduce using rule 3 (expression -> expression PLUS term .)
    MINUS           reduce using rule 3 (expression -> expression PLUS term .)
    TIMES           shift and go to state 15
    DIVIDE          shift and go to state 16
    MODULO          shift and go to state 17


state 21

    (4) expression -> expression MINUS term .
    (6) term -> term . TIMES factor
    (7) term -> term . DIVIDE factor
    (8) term -> term . MODULO factor

    RPAREN          reduce using rule 4 (expression -> expression MINUS term .)
    PLUS            reduce using rule 4 (expression -> expression MINUS term .)
    MINUS           reduce using rule 4 (expression -> expression MINUS term .)
    TIMES           shift and go to state 15
    DIVIDE          shift and go to state 16
    MODULO          shift and go to state 17


state 22

    (2) print_statement -> PRINT LPAREN STRING RPAREN SEMICOL .

    $end            reduce using rule 2 (print_statement -> PRINT LPAREN STRING RPAREN SEMICOL .)


state 23

    (6) term -> term TIMES factor .

    TIMES           reduce using rule 6 (term -> term TIMES factor .)
    DIVIDE          reduce using rule 6 (term -> term TIMES factor .)
    MODULO          reduce using rule 6 (term -> term TIMES factor .)
    RPAREN          reduce using rule 6 (term -> term TIMES factor .)
    PLUS            reduce using rule 6 (term -> term TIMES factor .)
    MINUS           reduce using rule 6 (term -> term TIMES factor .)


state 24

    (7) term -> term DIVIDE factor .

    TIMES           reduce using rule 7 (term -> term DIVIDE factor .)
    DIVIDE          reduce using rule 7 (term -> term DIVIDE factor .)
    MODULO          reduce using rule 7 (term -> term DIVIDE factor .)
    RPAREN          reduce using rule 7 (term -> term DIVIDE factor .)
    PLUS            reduce using rule 7 (term -> term DIVIDE factor .)
    MINUS           reduce using rule 7 (term -> term DIVIDE factor .)


state 25

    (8) term -> term MODULO factor .

    TIMES           reduce using rule 8 (term -> term MODULO factor .)
    DIVIDE          reduce using rule 8 (term -> term MODULO factor .)
    MODULO          reduce using rule 8 (term -> term MODULO factor .)
    RPAREN          reduce using rule 8 (term -> term MODULO factor .)
    PLUS            reduce using rule 8 (term -> term MODULO factor .)
    MINUS           reduce using rule 8 (term -> term MODULO factor .)

